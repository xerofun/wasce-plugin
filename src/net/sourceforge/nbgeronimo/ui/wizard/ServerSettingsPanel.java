/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2007 John Platts. All rights reserved.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Sun designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Sun in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * Contributor(s):
 *
 * The Original Software is nbgeronimo. The Initial Developer of the Original
 * Software is John Platts. Portions Copyright 2007 John Platts.
 * All Rights Reserved.
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 */

package net.sourceforge.nbgeronimo.ui.wizard;

import java.awt.Component;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.File;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import javax.swing.JFileChooser;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.filechooser.FileFilter;
import org.openide.WizardDescriptor;
import org.openide.util.HelpCtx;
import org.openide.util.NbBundle;

/**
 *
 * @author  John Platts
 */
public class ServerSettingsPanel extends javax.swing.JPanel
        implements WizardDescriptor.Panel {
    private transient GeronimoInstantiatingIterator instantiatingIterator;
    private transient WizardDescriptor wizardDescriptor;
    
    private List<ChangeListener> listeners =
            Collections.synchronizedList(new LinkedList<ChangeListener>());
    
    private final static String PROP_ERROR_MESSAGE =
            "WizardPanel_errorMessage";
    
    /** Creates new form ServerSettingsPanel */
    public ServerSettingsPanel(String[] steps, int index,
            ChangeListener listener,
            GeronimoInstantiatingIterator instantiatingIterator) {
        this.instantiatingIterator = instantiatingIterator;
        
        putClientProperty("WizardPanel_contentData", steps);
        putClientProperty("WizardPanel_contentSelectedIndex",
                Integer.valueOf(index));
        
        addChangeListener(listener);
        
        setName(steps[index]);
        
        initComponents();
        
        doAdditionalInitialization();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        serverLocationLabel = new javax.swing.JLabel();
        serverLocationTextField = new javax.swing.JTextField();
        serverLocationBrowseButton = new javax.swing.JButton();
        hostLabel = new javax.swing.JLabel();
        hostTextField = new javax.swing.JTextField();
        portLabel = new javax.swing.JLabel();
        portTextField = new javax.swing.JTextField();

        serverLocationLabel.setLabelFor(serverLocationTextField);
        serverLocationLabel.setText(org.openide.util.NbBundle.getMessage(ServerSettingsPanel.class, "ServerSettingsPanel.serverLocationLabel.text")); // NOI18N

        serverLocationTextField.setText(org.openide.util.NbBundle.getMessage(ServerSettingsPanel.class, "ServerSettingsPanel.serverLocationTextField.text")); // NOI18N

        serverLocationBrowseButton.setText(org.openide.util.NbBundle.getMessage(ServerSettingsPanel.class, "ServerSettingsPanel.serverLocationBrowseButton.text")); // NOI18N

        hostLabel.setLabelFor(hostTextField);
        hostLabel.setText(org.openide.util.NbBundle.getMessage(ServerSettingsPanel.class, "ServerSettingsPanel.hostLabel.text")); // NOI18N

        hostTextField.setText(org.openide.util.NbBundle.getMessage(ServerSettingsPanel.class, "ServerSettingsPanel.hostTextField.text")); // NOI18N

        portLabel.setLabelFor(portTextField);
        portLabel.setText(org.openide.util.NbBundle.getMessage(ServerSettingsPanel.class, "ServerSettingsPanel.portLabel.text")); // NOI18N

        portTextField.setText(org.openide.util.NbBundle.getMessage(ServerSettingsPanel.class, "ServerSettingsPanel.portTextField.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(hostLabel)
                    .addComponent(portLabel)
                    .addComponent(serverLocationLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(portTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE)
                    .addComponent(hostTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE)
                    .addComponent(serverLocationTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(serverLocationBrowseButton)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(serverLocationLabel)
                    .addComponent(serverLocationBrowseButton)
                    .addComponent(serverLocationTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(hostLabel)
                    .addComponent(hostTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(portLabel)
                    .addComponent(portTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(214, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel hostLabel;
    private javax.swing.JTextField hostTextField;
    private javax.swing.JLabel portLabel;
    private javax.swing.JTextField portTextField;
    private javax.swing.JButton serverLocationBrowseButton;
    private javax.swing.JLabel serverLocationLabel;
    private javax.swing.JTextField serverLocationTextField;
    // End of variables declaration//GEN-END:variables

    private class KeyListener extends KeyAdapter {
        @Override
        public void keyTyped(KeyEvent event) {
            fireChangeEvent();
        }
        @Override
        public void keyReleased(KeyEvent event) {
            fireChangeEvent();
        }
    };
    
    private void doAdditionalInitialization() {
        serverLocationTextField.addKeyListener(new KeyListener());
        hostTextField.addKeyListener(new KeyListener());
        portTextField.addKeyListener(new KeyListener());
    }
    
    public Component getComponent() {
        return this;
    }

    public HelpCtx getHelp() {
        return null;
    }

    public void readSettings(Object arg0) {
        
    }

    public void storeSettings(Object arg0) {
    }

    public void addChangeListener(ChangeListener listener) {
        listeners.add(listener);
    }

    public void removeChangeListener(ChangeListener listener) {
        listeners.remove(listener);
    }
    
    private void fireChangeEvent() {
        fireChangeEvent(new ChangeEvent(this));
    }
    private void fireChangeEvent(ChangeEvent event) {
        ChangeListener[] targetListeners;
        synchronized(listeners) {
            targetListeners = new ChangeListener[listeners.size()];
            ListIterator<ChangeListener> iterator = listeners.listIterator();
            
            for(int i = 0; i < targetListeners.length; i++) {
                if(iterator.hasNext()) {
                    targetListeners[i] = iterator.next();
                } else {
                    break;
                }
            }
        }
        
        for(int i = 0; i < targetListeners.length; i++) {
            ChangeListener listener = targetListeners[i];
            if(listener != null) {
                listener.stateChanged(event);
            }
        }
    }
    
    private final FileFilter directoryFileFilter = new FileFilter() {
        public boolean accept(File file) {
            return (file.exists() && file.isDirectory());
        }
        public String getDescription() {
            return NbBundle.getMessage(ServerSettingsPanel.class,
                    "DirectoriesFilterName");
        }
    };
    
    private JFileChooser fileChooser = new JFileChooser();
    private void showFileChooser() {
        fileChooser.setFileFilter(directoryFileFilter);
        fileChooser.setMultiSelectionEnabled(false);
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        
        File currentLocation = new File(serverLocationTextField.getText());
        if(currentLocation.exists() && currentLocation.isDirectory()) {
            fileChooser.setCurrentDirectory(currentLocation.getParentFile());
            fileChooser.setSelectedFile(currentLocation);
        }
        
        if(fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            serverLocationTextField.setText(fileChooser.getSelectedFile().getPath());
            fireChangeEvent();
        }
    }
}
